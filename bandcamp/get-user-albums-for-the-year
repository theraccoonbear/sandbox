#!/usr/bin/env perl
use strict;
use warnings;
use Web::Scraper;
use WWW::Mechanize;
use Data::Printer;
use lib './lib';
use BC::UserProfile;
use File::Slurp;
use JSON::XS;
use Getopt::Long;
use Text::Handlebars;

{
  my $ofh = select STDOUT;
  $| = 1;
  select $ofh;
}

{
  my $ofh = select STDERR;
  $| = 1;
  select $ofh;
}


binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

my $json = JSON::XS->new->utf8->space_after;
$json->convert_blessed(1);

my $handlebars = Text::Handlebars->new(
	#helpers => {
	#	fullName => sub {
	#		my ($context, $person) = @_;
	#		return $person->{firstName}
	#			. ' '
	#			. $person->{lastName};
	#	},
	#},
);

my $occurences = {};

my $cfg_file = 'config.json';
if (! -f $cfg_file) {
  die "First create config.json based on config.sample.json\n";
}

my $config = decode_json(read_file($cfg_file));



my $search_year = (localtime())[5] + 1900;

GetOptions (
	"year=i" => \$search_year
);


my $user_data_index = [];

my $ts = time();

my $users = $config->{users_to_list};
foreach my $user (@$users) {
  my $bc = new BC::UserProfile(user => $user);
  print STDERR "Loading ${user}'s collection...\n";
  my $collection = $bc->pullCollection();

  my $cnt = scalar @{ $collection->{collection} };
  print STDERR "Studying ${user}'s $cnt purchase" . ($cnt == 1 ? '' : 's') . "...\n";
  
  my $user_purchase = [grep {
    $_->fetchAlbum();
    
    if ($_->released) {
      if ($_->released->year eq $search_year) {
        print STDERR '+';
        1;
      } else {
        print STDERR '-';
        undef;
      }
    } else {
      undef;
    }
  } @{ $collection->{collection} }];
  print STDERR "\n";
  
  $cnt = scalar @{ $collection->{wishlist} };
  print STDERR "Studying ${user}'s $cnt wishlist item" . ($cnt == 1 ? '' : 's') . "...\n";
  
  my $user_wishlist = [grep {
    $_->fetchAlbum();
    
    if ($_->released) {
      if ($_->released->year eq $search_year) {
        print STDERR '+';
        1;
      } else {
        print STDERR '-';
        undef;
      }
    } else {
      undef;
    }
  } @{ $collection->{wishlist} }];
  
  print STDERR "\n";
  print "\n";
  print "${user}'s albums released in $search_year:\n";
  
  map {
    my $released_as = $_->band_name . ' - ' . $_->item_title;
    $occurences->{$released_as}++;
    print '    ' . $released_as . ' / ' . $_->released->strftime('%b %d, %Y') ."\n";
  } sort {
    lc($a->band_name) cmp lc($b->band_name) ||
    lc($a->item_title) cmp lc($b->item_title)
  } (@$user_purchase, @$user_wishlist);
  
  print STDERR "Found " . scalar @$user_purchase . " $search_year release(s) in purchases, and " . scalar @$user_wishlist . " $search_year release(s) in wishlist\n\n";
  print "\n\n";
	
	my $filename = "user-${user}-wishlist.json";
	my $filepath = "./data/$filename";
	push @$user_data_index, { user => $user, data => $filename . '?_cache_buster=' . $ts };
	write_file($filepath, $json->encode($collection));
	write_file('./data/index.json', $json->encode($user_data_index));
}


print STDERR "\nOverall Statistics:\n";
print "\nOverall Statistics:\n";
foreach my $release (sort { $occurences->{$b} <=> $occurences->{$a} } keys %$occurences) {
  print STDERR "    $release has " . $occurences->{$release} . " fan(s)\n";
	print "    $release has " . $occurences->{$release} . " fan(s)\n";
}